---
title: "Introduction to GEE"
format:
  html:
    toc: true    # Enable Table of Contents
    toc-depth: 2 # Show up to level 2 headings
---

## Summary

This week's material is all about GEE (Google Earth Engine). In a simple definition, GEE is a cloud platform that allows us to access satellite imagery for the whole world and spatial-computation on Google for free. GEE hosts massive amounts of satellite imagery and we as a user request their imagery data and analyse it on the cloud-platform without have to worry about the capability of our local machine. Basically, GEE has an architecture that collects user input (client side) and then process this input (server side). In GEE we could manage both raster and feature (vector) data. We input command on GEE mostly using Java Script programming language. As someone enthusiastic with GEE, the need to learn 'a new' programming language almost discourages me, as I worry that I might mix up all the programming languages I have learnt before.However, when I looked at the way GEE articulates data structures, I found it quite similar to Python, with just a few additional keywords, such as 'var' to denote variable. Below are some basic pieces of information from Andy's lecture about the GEE language that GEE starters need to know. Check out this introduction from Google if you're still unconvinced

![](images/clipboard-203956171.png){width="508"}

Figure 1 : Basic javascript in GEE. source : [Andrew Maclachan Github](https://andrewmaclachlan.github.io/CASA0023/5_GEE_I.html)

When I was first introduced to the idea that GEE is efficient in managing raster data, I was curious about how this efficiency works. For example, if I want to use Landsat 8 (30 m resolution) to analyze the whole UK, it would require processing every 30 m pixel across the whole region, which I assumed would take longer time. However, what makes GEE faster dealing with those data actually because there is a pyramid of reduced resolution in GEE, which able to optimizes performance using lower-resolution versions of the data when full detail is not necessary and also resampling method to adapt the analysis requirement. Thus when performing analysis, GEE does not just take the original image resolution, but GEE adjusts image resolution based on our output needs. In summary, when you are zooming out and zooming in, GEE retrieves different resolution of imagery.

As a starter GEE interface is a bit too much, like where should I focus on because there are 3 main parts of it. Two years ago I even tried to write my first script on console panel :) because I thought it would be similar with R Studio. Come to think back on it, GEE has already put the 'section to code' intuitively in a centre called code editor. See the picture of GEE interface below, if you are like me a starter in GEE the very first thing that anyone should notice the most is code editor : a space to write our code and for the other parts let our self become adjust to it along the time.

![](images/ee-editor_1920.png){width="689"}

Figure 2 : GEE Interface. source : [GEE Beginer cookbook](https://developers.google.com/earth-engine/tutorials/community/beginners-cookbook)

## Application

\>\> \>"*We might not be able to turn back time, but well..... we sure can look back using Landsat"*\<\<

In this section, I would like to explore the **GEE strength on providing vast archive** of imagery to investigate unplanned settlements during urban transformation projects. The vast historical of imagery enables researcher to look back at various critical date for development plans. \@yilmaz2024 used collection of Landsat data (Landsat 5, 6,7 ) from March 1983 to February 2007 to compare land use before and after urban renewal project happen. When I pondered upon this it is like investigating planning product in a sense of is it *planning to fail or failing to plan?*

With analysis of temporal imagery, the result show a contrasting initial condition of urban renewal's targetted area and its projection. For instance, in Gaziosmanpasa district it is projected to be a forested area in the future, however after looking back up to one year before the approval of the development plans turns out it is highly urbanized area. The contrasting initial condition and urban renewal project in this area will present challenge to the success of the plan, as the development of greening area will fiercely compete with massively built up area.

This finding also underlined the *issues* that projected plan is not carefully consider the dominant land use of the area, which will most likely shape the future land use. As a planner, it is not easy to make sure the execution of plannings we made although we have risk mitigation in our proposed plan. However, after reading this paper I realize that we can utilize the historical archive of satellite imagery in GEE to monitor land use growth pattern before projecting its future planning target, especially to target building green space or open space among the growing built up areas.

![](images/clipboard-3598015637.png){width="728"}

Figure 3 : Comparisan of existing land use and its projection. Source : @yilmaz2024\]

The case of comparing urban renewal project with old urban areas is interesting in urban management. However, @urbanre underlined the challenges to get enough information during the process because **the lack of detection methods framework in urban renewal mapping**. As we can see from the previous paper, they use random forest algorithm to identify urban and non-urban and validate using Kappa coefficients. In this paper, they propose a complete mapping framework including segmentation in detecting temporal information of urban renewal. Some key take away from their proposed framework are:

1.  Data Preparation : define the urban scope and limit its boundary combined with image collections to get time series image stacks
2.  Identification of old/renewed urban areas : LandTrendr fitting (algorithm to detect inter-annual land cover change) + segmentation of loss/grain (quantifying the dissimilarity) and random forest classification
3.  Temporal detection : compare extraction strategy with different loss/grain and combination of NDVI/NDBI/NDMI + validation samples

Oh wait....for someone who is not really interested in remote sensing's application in urban mapping this will be challenging, but maybe the snapshot of the result below can help you grasp the intuition of how those steps yield the result. We can see from the left picture that we could have NDVI index graph to explain the built-up area

![](images/clipboard-2246403998.png){width="752"}

Figure 4 : Left : index of NDVI in time series with curve from LandTrendr ; right : urban renewal and urban old area. Source : [@ni2023]

## Reflection

The most exciting part of using Google Earth Engine (GEE) for me is the ability to share analysis results through web map applications. Clients are usually more engaged when they can interact with a visual platform that helps them understand the project better. Remote sensing analysis is often more complex than regular vector processing, so I imagine the difficulty on to deliver the results with its key preprocessing step. What makes it even harder is, we often need to switch between remote sensing desktop apps and present the results.

By using a web map, we make it easier for clients, even those without a technical background, to explore and understand the intuition of the analysis : what layers we have, what imagery we use, what imageries we combined. The interactive map will provide a clearer view of the project, allowing clients to see the bigger picture and stay engaged throughout the process. However, I must admit GEE is only a tool to make best use of it we need a prior fundamental concept of remote sensing, such as spectral band, enhancement, fusion, PCA, and other remote sensing pre-processing steps. Because in every script we write there should be a thinking process on why we do reduction, why we do enhancement, basically need our judgement to navigate each steps.

I would also like to highlight the importance of domain knowledge when using remote sensing sources. As I mentioned before GEE is just a toolâ€“its ability to provide remarkable insights truly depend on the person utilizing it. We might use the same satellite imagery, but with domain knowledge the analysis will yield different results. For example, *The Economist* uses satellite data to track conflict in real time (FYI, I come across this in CASA Seminar in 2023 during the time I prepared my graduate's school application), *Pediatrics* use remote sensing to understand the association of air pollution with asthma prevalence. *Archaeologists* can utilize remote sensing alongside other methods to understand landscape of historical sites. There are *tons* of use cases, right?!

If you are having curious mind like me, check Dr Ollie Ballinger's github page [here](https://oballinger.github.io/#) to see how powerful remote sensing can be when combined with domain knowledge. Ah yes, he is also a lecturer in Remote Sensing class.

## References
